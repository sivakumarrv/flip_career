{"ast":null,"code":"import _classCallCheck from \"/var/www/workspace/flip-careers/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/workspace/flip-careers/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/workspace/flip-careers/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/workspace/flip-careers/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/workspace/flip-careers/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/var/www/workspace/flip-careers/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/var/www/workspace/flip-careers/src/components/PageElements/JobOpenings.js\";\nimport React from 'react';\nimport Loading from './Loading';\nimport { Link as ScrollLink, scrollSpy as ScrollSpy } from 'react-scroll';\n/* FontAwesome */\n\nimport { faBriefcase } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { CURRENT_OPENINGS } from '../../constants/SiteContent';\n\nvar JobOpenings =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(JobOpenings, _React$Component);\n\n  function JobOpenings() {\n    var _this;\n\n    _classCallCheck(this, JobOpenings);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(JobOpenings).call(this));\n    _this.state = {\n      isLoading: true,\n      selectedJobCategory: null,\n      jobCategories: [],\n      jobOpenings: [],\n      activeJobOpenings: [],\n      hasFiltered: false\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.setActiveJobCategory = _this.setActiveJobCategory.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createJobCountMarkup = _this.createJobCountMarkup.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(JobOpenings, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('/json/job-openings.json').then(function (res) {\n        if (res.status === 200) return res.json();\n        return [];\n      }).then(function (json) {\n        var jobCategories = json.job_categories ? json.job_categories.sort() : [];\n        var jobOpenings = json.job_openings ? json.job_openings : [];\n        var selectedJobCategory = null;\n        var activeJobOpenings = [];\n        jobCategories.map(function (jobCategory) {\n          if (selectedJobCategory === null && jobOpenings[jobCategory]) {\n            selectedJobCategory = jobCategory;\n            activeJobOpenings = jobOpenings[jobCategory];\n          }\n\n          return [];\n        });\n\n        _this2.setState({\n          jobCategories: jobCategories,\n          jobOpenings: jobOpenings,\n          activeJobOpenings: activeJobOpenings,\n          selectedJobCategory: selectedJobCategory,\n          isLoading: false\n        }, function () {\n          ScrollSpy.update();\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      e.preventDefault();\n      var jobCategory = e.currentTarget.attributes['data-value'].value;\n      this.setActiveJobCategory(jobCategory);\n    }\n  }, {\n    key: \"setActiveJobCategory\",\n    value: function setActiveJobCategory(jobCategory) {\n      var activeJobOpenings = this.state.jobOpenings[jobCategory] ? this.state.jobOpenings[jobCategory] : [];\n      this.setState({\n        selectedJobCategory: jobCategory,\n        activeJobOpenings: activeJobOpenings,\n        hasFiltered: true\n      });\n    }\n    /**\n     * Generate spacing & jobs count html\n     * @param {number} totalJobsCount\n     */\n\n  }, {\n    key: \"createJobCountMarkup\",\n    value: function createJobCountMarkup(totalJobsCount) {\n      return {\n        __html: totalJobsCount > 0 ? \"&nbsp;\".concat(totalJobsCount, \" Job Avaliable\") : null\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          jobOpenings = _this$state.jobOpenings,\n          jobCategories = _this$state.jobCategories,\n          activeJobOpenings = _this$state.activeJobOpenings,\n          selectedJobCategory = _this$state.selectedJobCategory,\n          hasFiltered = _this$state.hasFiltered;\n\n      if (isLoading) {\n        return React.createElement(Loading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        });\n      }\n\n      if (jobOpenings.length === 0) {\n        return null;\n      }\n\n      var activeCategory = null;\n      var htmlJobCategories = jobCategories.map(function (jobCategory) {\n        var totalJobsCount = jobOpenings[jobCategory] ? jobOpenings[jobCategory].length : 0;\n        var makeCategoryActive = false;\n\n        if (activeCategory === null) {\n          makeCategoryActive = hasFiltered !== true && totalJobsCount > 0;\n          activeCategory = makeCategoryActive ? jobCategory : activeCategory;\n        }\n\n        var btnClassName = 'is-size-6' + (jobCategory === selectedJobCategory || makeCategoryActive ? ' is-active has-text-primary has-text-weight-medium ' : '');\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(ScrollLink, {\n          key: jobCategory,\n          \"data-value\": jobCategory,\n          className: btnClassName,\n          onClick: _this3.handleClick,\n          to: \"jobOpenings\",\n          spy: true,\n          smooth: true,\n          offset: -100,\n          duration: 250,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, jobCategory, ' ', React.createElement(\"span\", {\n          className: \"tag is-info\",\n          dangerouslySetInnerHTML: _this3.createJobCountMarkup(totalJobsCount),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        })));\n      });\n      var htmlJobOpenings = selectedJobCategory !== null ? activeJobOpenings.length > 0 ? activeJobOpenings.map(function (jobOpening) {\n        return React.createElement(JobOpening, {\n          key: jobOpening.title,\n          data: jobOpening,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        });\n      }) : React.createElement(\"div\", {\n        className: \"column is-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"box is-shadowless mt-1rem  is-full\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"notification is-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"is-size-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Currently, we do not have any openings for this business unit.\")))) : null;\n      return React.createElement(\"section\", {\n        className: \"hero is-light\",\n        id: \"currentOpenings\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"hero-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"title has-text-centered has-text-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, CURRENT_OPENINGS), React.createElement(\"p\", {\n        className: \"mb-1rem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Following are the roles we are currently hiring for. We are a dynamic young organization looking for talented people all the time, so keep checking this page regularly. And, if you think you are exceptional and a good fit for us, please send your CV to\", React.createElement(\"a\", {\n        href: \"mailto:careers@learnwithflip.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"has-text-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"\\xA0\", React.createElement(\"u\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"careers@learnwithflip.com\"))), React.createElement(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"column is-4 mt-1rem\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"aside\", {\n        className: \"menu job-opening-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        class: \"title is-size-5 has-text-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"JOB CATEGORY LIST\"), React.createElement(\"ul\", {\n        className: \"menu-list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, htmlJobCategories))), React.createElement(\"div\", {\n        className: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"jobOpenings\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, htmlJobOpenings))))));\n    }\n  }]);\n\n  return JobOpenings;\n}(React.Component);\n\nvar JobOpening = function JobOpening(props) {\n  var data = props.data;\n  var jobTitle = data.title ? data.title : '';\n  var jobExperience = data.experience ? data.experience : '';\n  var jobLocation = data.location ? data.location : '';\n  var jobDescription = data.description ? data.description : '';\n  var jobApplyLink = data.apply_link ? data.apply_link : '';\n  var jobJdLink = data.jd_link ? data.jd_link : '';\n  return React.createElement(\"div\", {\n    className: \"column is-full\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"message is-primary is-box-shadow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"message-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"is-size-5 has-text-weight-semibold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faBriefcase,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }), \"\\xA0 Role: \", jobTitle)), React.createElement(\"div\", {\n    className: \"message-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"content is-size-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, \"Experience:\"), \" \", jobExperience), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, \"Location:\"), \" \", jobLocation), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, \"Description:\"), \" \", jobDescription), (jobApplyLink !== '' || jobJdLink !== '') && React.createElement(\"div\", {\n    className: \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, jobApplyLink !== '' && React.createElement(\"a\", {\n    className: \"button is-link\",\n    href: jobApplyLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, \"Apply Now\"), jobJdLink !== '' && React.createElement(\"a\", {\n    className: \"button is-info\",\n    href: jobJdLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, \"Job Description\"))))));\n};\n\nexport default JobOpenings;","map":{"version":3,"sources":["/var/www/workspace/flip-careers/src/components/PageElements/JobOpenings.js"],"names":["React","Loading","Link","ScrollLink","scrollSpy","ScrollSpy","faBriefcase","FontAwesomeIcon","CURRENT_OPENINGS","JobOpenings","state","isLoading","selectedJobCategory","jobCategories","jobOpenings","activeJobOpenings","hasFiltered","handleClick","bind","setActiveJobCategory","createJobCountMarkup","fetch","then","res","status","json","job_categories","sort","job_openings","map","jobCategory","setState","update","catch","err","console","log","e","preventDefault","currentTarget","attributes","value","totalJobsCount","__html","length","activeCategory","htmlJobCategories","makeCategoryActive","btnClassName","htmlJobOpenings","jobOpening","title","Component","JobOpening","props","data","jobTitle","jobExperience","experience","jobLocation","location","jobDescription","description","jobApplyLink","apply_link","jobJdLink","jd_link"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,IAAI,IAAIC,UAAjB,EAA6BC,SAAS,IAAIC,SAA1C,QAA2D,cAA3D;AAEA;;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AAEA,SAASC,gBAAT,QAAiC,6BAAjC;;IAEMC,W;;;;;AACJ,yBAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IADA;AAEXC,MAAAA,mBAAmB,EAAE,IAFV;AAGXC,MAAAA,aAAa,EAAE,EAHJ;AAIXC,MAAAA,WAAW,EAAE,EAJF;AAKXC,MAAAA,iBAAiB,EAAE,EALR;AAMXC,MAAAA,WAAW,EAAE;AANF,KAAb;AASA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,uDAAnB;AACA,UAAKC,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BD,IAA1B,uDAA5B;AACA,UAAKE,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BF,IAA1B,uDAA5B;AAdY;AAeb;;;;wCAEmB;AAAA;;AAClBG,MAAAA,KAAK,CAAC,yBAAD,CAAL,CACGC,IADH,CACQ,UAAAC,GAAG,EAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB,OAAOD,GAAG,CAACE,IAAJ,EAAP;AACxB,eAAO,EAAP;AACD,OAJH,EAKGH,IALH,CAKQ,UAAAG,IAAI,EAAI;AACZ,YAAMZ,aAAa,GAAGY,IAAI,CAACC,cAAL,GAClBD,IAAI,CAACC,cAAL,CAAoBC,IAApB,EADkB,GAElB,EAFJ;AAGA,YAAMb,WAAW,GAAGW,IAAI,CAACG,YAAL,GAAoBH,IAAI,CAACG,YAAzB,GAAwC,EAA5D;AAEA,YAAIhB,mBAAmB,GAAG,IAA1B;AACA,YAAIG,iBAAiB,GAAG,EAAxB;AACAF,QAAAA,aAAa,CAACgB,GAAd,CAAkB,UAAAC,WAAW,EAAI;AAC/B,cAAIlB,mBAAmB,KAAK,IAAxB,IAAgCE,WAAW,CAACgB,WAAD,CAA/C,EAA8D;AAC5DlB,YAAAA,mBAAmB,GAAGkB,WAAtB;AACAf,YAAAA,iBAAiB,GAAGD,WAAW,CAACgB,WAAD,CAA/B;AACD;;AACD,iBAAO,EAAP;AACD,SAND;;AAQA,QAAA,MAAI,CAACC,QAAL,CACE;AACElB,UAAAA,aAAa,EAAEA,aADjB;AAEEC,UAAAA,WAAW,EAAEA,WAFf;AAGEC,UAAAA,iBAAiB,EAAEA,iBAHrB;AAIEH,UAAAA,mBAAmB,EAAEA,mBAJvB;AAKED,UAAAA,SAAS,EAAE;AALb,SADF,EAQE,YAAM;AACJN,UAAAA,SAAS,CAAC2B,MAAV;AACD,SAVH;AAYD,OAjCH,EAkCGC,KAlCH,CAkCS,UAAAC,GAAG,EAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OApCH;AAqCD;;;gCAEWG,C,EAAG;AACbA,MAAAA,CAAC,CAACC,cAAF;AACA,UAAMR,WAAW,GAAGO,CAAC,CAACE,aAAF,CAAgBC,UAAhB,CAA2B,YAA3B,EAAyCC,KAA7D;AAEA,WAAKtB,oBAAL,CAA0BW,WAA1B;AACD;;;yCAEoBA,W,EAAa;AAChC,UAAMf,iBAAiB,GAAG,KAAKL,KAAL,CAAWI,WAAX,CAAuBgB,WAAvB,IACtB,KAAKpB,KAAL,CAAWI,WAAX,CAAuBgB,WAAvB,CADsB,GAEtB,EAFJ;AAIA,WAAKC,QAAL,CAAc;AACZnB,QAAAA,mBAAmB,EAAEkB,WADT;AAEZf,QAAAA,iBAAiB,EAAEA,iBAFP;AAGZC,QAAAA,WAAW,EAAE;AAHD,OAAd;AAKD;AAED;;;;;;;yCAIqB0B,c,EAAgB;AACnC,aAAO;AACLC,QAAAA,MAAM,EACJD,cAAc,GAAG,CAAjB,mBAA8BA,cAA9B,sBAA+D;AAF5D,OAAP;AAID;;;6BAEQ;AAAA;;AAAA,wBAQH,KAAKhC,KARF;AAAA,UAELC,SAFK,eAELA,SAFK;AAAA,UAGLG,WAHK,eAGLA,WAHK;AAAA,UAILD,aAJK,eAILA,aAJK;AAAA,UAKLE,iBALK,eAKLA,iBALK;AAAA,UAMLH,mBANK,eAMLA,mBANK;AAAA,UAOLI,WAPK,eAOLA,WAPK;;AASP,UAAIL,SAAJ,EAAe;AACb,eAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,UAAIG,WAAW,CAAC8B,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,eAAO,IAAP;AACD;;AACD,UAAIC,cAAc,GAAG,IAArB;AACA,UAAMC,iBAAiB,GAAGjC,aAAa,CAACgB,GAAd,CAAkB,UAAAC,WAAW,EAAI;AACzD,YAAIY,cAAc,GAAG5B,WAAW,CAACgB,WAAD,CAAX,GACjBhB,WAAW,CAACgB,WAAD,CAAX,CAAyBc,MADR,GAEjB,CAFJ;AAIA,YAAIG,kBAAkB,GAAG,KAAzB;;AACA,YAAIF,cAAc,KAAK,IAAvB,EAA6B;AAC3BE,UAAAA,kBAAkB,GAAG/B,WAAW,KAAK,IAAhB,IAAwB0B,cAAc,GAAG,CAA9D;AACAG,UAAAA,cAAc,GAAGE,kBAAkB,GAAGjB,WAAH,GAAiBe,cAApD;AACD;;AACD,YAAMG,YAAY,GAChB,eACClB,WAAW,KAAKlB,mBAAhB,IAAuCmC,kBAAvC,GACG,qDADH,GAEG,EAHJ,CADF;AAKA,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,UAAD;AACE,UAAA,GAAG,EAAEjB,WADP;AAEE,wBAAYA,WAFd;AAGE,UAAA,SAAS,EAAEkB,YAHb;AAIE,UAAA,OAAO,EAAE,MAAI,CAAC/B,WAJhB;AAKE,UAAA,EAAE,EAAC,aALL;AAME,UAAA,GAAG,EAAE,IANP;AAOE,UAAA,MAAM,EAAE,IAPV;AAQE,UAAA,MAAM,EAAE,CAAC,GARX;AASE,UAAA,QAAQ,EAAE,GATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAWGa,WAXH,EAWgB,GAXhB,EAYE;AACE,UAAA,SAAS,EAAC,aADZ;AAEE,UAAA,uBAAuB,EAAE,MAAI,CAACV,oBAAL,CACvBsB,cADuB,CAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAZF,CADF,CADF;AAuBD,OAtCyB,CAA1B;AAwCA,UAAMO,eAAe,GACnBrC,mBAAmB,KAAK,IAAxB,GACEG,iBAAiB,CAAC6B,MAAlB,GAA2B,CAA3B,GACE7B,iBAAiB,CAACc,GAAlB,CAAsB,UAAAqB,UAAU,EAAI;AAClC,eAAO,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEA,UAAU,CAACC,KAA5B;AAAmC,UAAA,IAAI,EAAED,UAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFD,CADF,GAKE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EADF,CADF,CADF,CANJ,GAgBI,IAjBN;AAmBA,aACE;AAAS,QAAA,SAAS,EAAC,eAAnB;AAAmC,QAAA,EAAE,EAAC,iBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,uCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG1C,gBADH,CADF,EAIE;AAAG,QAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yQAKE;AACE,QAAA,IAAI,EAAC,kCADP;AAEE,QAAA,MAAM,EAAC,QAFT;AAGE,QAAA,GAAG,EAAC,qBAHN;AAIE,QAAA,SAAS,EAAC,eAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAPF,CALF,CAJF,EAmBE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,uBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,KAAK,EAAC,+BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAIE;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2BsC,iBAA3B,CAJF,CADF,CADF,EASE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuBG,eAAvB,CADF,CATF,CAnBF,CADF,CADF,CADF;AAuCD;;;;EA1MuBjD,KAAK,CAACoD,S;;AA6MhC,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AAAA,MAClBC,IADkB,GACTD,KADS,CAClBC,IADkB;AAE1B,MAAMC,QAAQ,GAAGD,IAAI,CAACJ,KAAL,GAAaI,IAAI,CAACJ,KAAlB,GAA0B,EAA3C;AACA,MAAMM,aAAa,GAAGF,IAAI,CAACG,UAAL,GAAkBH,IAAI,CAACG,UAAvB,GAAoC,EAA1D;AACA,MAAMC,WAAW,GAAGJ,IAAI,CAACK,QAAL,GAAgBL,IAAI,CAACK,QAArB,GAAgC,EAApD;AACA,MAAMC,cAAc,GAAGN,IAAI,CAACO,WAAL,GAAmBP,IAAI,CAACO,WAAxB,GAAsC,EAA7D;AACA,MAAMC,YAAY,GAAGR,IAAI,CAACS,UAAL,GAAkBT,IAAI,CAACS,UAAvB,GAAoC,EAAzD;AACA,MAAMC,SAAS,GAAGV,IAAI,CAACW,OAAL,GAAeX,IAAI,CAACW,OAApB,GAA8B,EAAhD;AACA,SACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,oCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAE5D,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,iBAEgBkD,QAFhB,CADF,CADF,EAOE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,OACsBC,aADtB,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,OACoBE,WADpB,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,OACuBE,cADvB,CAPF,EAUG,CAACE,YAAY,KAAK,EAAjB,IAAuBE,SAAS,KAAK,EAAtC,KACC;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,YAAY,KAAK,EAAjB,IACC;AACE,IAAA,SAAS,EAAC,gBADZ;AAEE,IAAA,IAAI,EAAEA,YAFR;AAGE,IAAA,MAAM,EAAC,QAHT;AAIE,IAAA,GAAG,EAAC,qBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,EAWGE,SAAS,KAAK,EAAd,IACC;AACE,IAAA,SAAS,EAAC,gBADZ;AAEE,IAAA,IAAI,EAAEA,SAFR;AAGE,IAAA,MAAM,EAAC,QAHT;AAIE,IAAA,GAAG,EAAC,qBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAZJ,CAXJ,CADF,CAPF,CADF,CADF;AAiDD,CAzDD;;AA2DA,eAAexD,WAAf","sourcesContent":["import React from 'react'\nimport Loading from './Loading'\nimport { Link as ScrollLink, scrollSpy as ScrollSpy } from 'react-scroll'\n\n/* FontAwesome */\nimport { faBriefcase } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { CURRENT_OPENINGS } from '../../constants/SiteContent'\n\nclass JobOpenings extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      isLoading: true,\n      selectedJobCategory: null,\n      jobCategories: [],\n      jobOpenings: [],\n      activeJobOpenings: [],\n      hasFiltered: false\n    }\n\n    this.handleClick = this.handleClick.bind(this)\n    this.setActiveJobCategory = this.setActiveJobCategory.bind(this)\n    this.createJobCountMarkup = this.createJobCountMarkup.bind(this)\n  }\n\n  componentDidMount() {\n    fetch('/json/job-openings.json')\n      .then(res => {\n        if (res.status === 200) return res.json()\n        return []\n      })\n      .then(json => {\n        const jobCategories = json.job_categories\n          ? json.job_categories.sort()\n          : []\n        const jobOpenings = json.job_openings ? json.job_openings : []\n\n        let selectedJobCategory = null\n        let activeJobOpenings = []\n        jobCategories.map(jobCategory => {\n          if (selectedJobCategory === null && jobOpenings[jobCategory]) {\n            selectedJobCategory = jobCategory\n            activeJobOpenings = jobOpenings[jobCategory]\n          }\n          return []\n        })\n\n        this.setState(\n          {\n            jobCategories: jobCategories,\n            jobOpenings: jobOpenings,\n            activeJobOpenings: activeJobOpenings,\n            selectedJobCategory: selectedJobCategory,\n            isLoading: false\n          },\n          () => {\n            ScrollSpy.update()\n          }\n        )\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  }\n\n  handleClick(e) {\n    e.preventDefault()\n    const jobCategory = e.currentTarget.attributes['data-value'].value\n\n    this.setActiveJobCategory(jobCategory)\n  }\n\n  setActiveJobCategory(jobCategory) {\n    const activeJobOpenings = this.state.jobOpenings[jobCategory]\n      ? this.state.jobOpenings[jobCategory]\n      : []\n\n    this.setState({\n      selectedJobCategory: jobCategory,\n      activeJobOpenings: activeJobOpenings,\n      hasFiltered: true\n    })\n  }\n\n  /**\n   * Generate spacing & jobs count html\n   * @param {number} totalJobsCount\n   */\n  createJobCountMarkup(totalJobsCount) {\n    return {\n      __html:\n        totalJobsCount > 0 ? `&nbsp;${totalJobsCount} Job Avaliable` : null\n    }\n  }\n\n  render() {\n    const {\n      isLoading,\n      jobOpenings,\n      jobCategories,\n      activeJobOpenings,\n      selectedJobCategory,\n      hasFiltered\n    } = this.state\n    if (isLoading) {\n      return <Loading />\n    }\n    if (jobOpenings.length === 0) {\n      return null\n    }\n    let activeCategory = null\n    const htmlJobCategories = jobCategories.map(jobCategory => {\n      let totalJobsCount = jobOpenings[jobCategory]\n        ? jobOpenings[jobCategory].length\n        : 0\n\n      let makeCategoryActive = false\n      if (activeCategory === null) {\n        makeCategoryActive = hasFiltered !== true && totalJobsCount > 0\n        activeCategory = makeCategoryActive ? jobCategory : activeCategory\n      }\n      const btnClassName =\n        'is-size-6' +\n        (jobCategory === selectedJobCategory || makeCategoryActive\n          ? ' is-active has-text-primary has-text-weight-medium '\n          : '')\n      return (\n        <li>\n          <ScrollLink\n            key={jobCategory}\n            data-value={jobCategory}\n            className={btnClassName}\n            onClick={this.handleClick}\n            to=\"jobOpenings\"\n            spy={true}\n            smooth={true}\n            offset={-100}\n            duration={250}\n          >\n            {jobCategory}{' '}\n            <span\n              className=\"tag is-info\"\n              dangerouslySetInnerHTML={this.createJobCountMarkup(\n                totalJobsCount\n              )}\n            />\n          </ScrollLink>\n        </li>\n      )\n    })\n\n    const htmlJobOpenings =\n      selectedJobCategory !== null ? (\n        activeJobOpenings.length > 0 ? (\n          activeJobOpenings.map(jobOpening => {\n            return <JobOpening key={jobOpening.title} data={jobOpening} />\n          })\n        ) : (\n          <div className=\"column is-flex\">\n            <div className=\"box is-shadowless mt-1rem  is-full\">\n              <div className=\"notification is-danger\">\n                <h4 className=\"is-size-5\">\n                  Currently, we do not have any openings for this business unit.\n                </h4>\n              </div>\n            </div>\n          </div>\n        )\n      ) : null\n\n    return (\n      <section className=\"hero is-light\" id=\"currentOpenings\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h2 className=\"title has-text-centered has-text-info\">\n              {CURRENT_OPENINGS}\n            </h2>\n            <p className=\"mb-1rem\">\n              Following are the roles we are currently hiring for. We are a\n              dynamic young organization looking for talented people all the\n              time, so keep checking this page regularly. And, if you think you\n              are exceptional and a good fit for us, please send your CV to\n              <a\n                href=\"mailto:careers@learnwithflip.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"has-text-link\"\n              >\n                &nbsp;\n                <u>careers@learnwithflip.com</u>\n              </a>\n            </p>\n            <div className=\"columns\">\n              <div className=\"column is-4 mt-1rem\">\n                <aside className=\"menu job-opening-list\">\n                  <h3 class=\"title is-size-5 has-text-link\">\n                    JOB CATEGORY LIST\n                  </h3>\n                  <ul className=\"menu-list\">{htmlJobCategories}</ul>\n                </aside>\n              </div>\n              <div className=\"column\">\n                <div id=\"jobOpenings\">{htmlJobOpenings}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    )\n  }\n}\n\nconst JobOpening = props => {\n  const { data } = props\n  const jobTitle = data.title ? data.title : ''\n  const jobExperience = data.experience ? data.experience : ''\n  const jobLocation = data.location ? data.location : ''\n  const jobDescription = data.description ? data.description : ''\n  const jobApplyLink = data.apply_link ? data.apply_link : ''\n  const jobJdLink = data.jd_link ? data.jd_link : ''\n  return (\n    <div className=\"column is-full\">\n      <div className=\"message is-primary is-box-shadow\">\n        <div className=\"message-header\">\n          <h3 className=\"is-size-5 has-text-weight-semibold\">\n            <FontAwesomeIcon icon={faBriefcase} />\n            &nbsp; Role: {jobTitle}\n          </h3>\n        </div>\n        <div className=\"message-body\">\n          <div className=\"content is-size-6\">\n            <p>\n              <b>Experience:</b> {jobExperience}\n            </p>\n            <p>\n              <b>Location:</b> {jobLocation}\n            </p>\n            <p>\n              <b>Description:</b> {jobDescription}\n            </p>\n            {(jobApplyLink !== '' || jobJdLink !== '') && (\n              <div className=\"buttons\">\n                {jobApplyLink !== '' && (\n                  <a\n                    className=\"button is-link\"\n                    href={jobApplyLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Apply Now\n                  </a>\n                )}\n                {jobJdLink !== '' && (\n                  <a\n                    className=\"button is-info\"\n                    href={jobJdLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Job Description\n                  </a>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default JobOpenings\n"]},"metadata":{},"sourceType":"module"}